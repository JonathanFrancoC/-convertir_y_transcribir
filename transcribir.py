import os
import subprocess
import whisper
import time
from tqdm import tqdm  # Para la barra de progreso

# üîπ Directorios principales
BASE_DIR = r"C:\Users\jonat\Desktop\videollamadas"  # Ruta base donde se almacenan los archivos
VIDEO_DIR = os.path.join(BASE_DIR, "video")  # Carpeta que contiene los videos
AUDIO_DIR = os.path.join(BASE_DIR, "audio")  # Carpeta donde se guardar√°n los audios extra√≠dos
RESUMEN_DIR = os.path.join(BASE_DIR, "resumen")  # Carpeta donde se guardar√°n las transcripciones en texto

# üîπ Crear las carpetas si no existen
os.makedirs(AUDIO_DIR, exist_ok=True)
os.makedirs(RESUMEN_DIR, exist_ok=True)

# üîπ Cargar modelo Whisper para la transcripci√≥n
model = whisper.load_model("medium")  # Modelos disponibles: "small", "medium", "large"

def convertir_video_a_audio(video_path, audio_path):
    """
    Convierte un archivo de video en audio usando FFmpeg.
    Solo se ejecuta si el archivo de audio no existe previamente.
    """
    if not os.path.exists(audio_path):
        print(f"üé• Convirtiendo {os.path.basename(video_path)} a audio...")
        comando = [
            "ffmpeg", "-i", video_path, "-q:a", "0", "-map", "a", audio_path, "-y"
        ]
        subprocess.run(comando, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)  # Ejecuta FFmpeg sin mostrar salida
    else:
        print(f"‚ö†Ô∏è Audio ya existe: {os.path.basename(audio_path)}, omitiendo conversi√≥n.")

def formatear_texto(texto, palabras_por_linea=50):
    """
    Divide el texto en l√≠neas de un n√∫mero determinado de palabras.
    Esto facilita la lectura en los archivos de texto resultantes.
    """
    palabras = texto.split()
    lineas = [" ".join(palabras[i:i + palabras_por_linea]) for i in range(0, len(palabras), palabras_por_linea)]
    return "\n".join(lineas)  # Une las l√≠neas con saltos de l√≠nea

def transcribir_audio_a_texto(audio_path, texto_path):
    """
    Transcribe el audio a texto usando Whisper.
    Muestra una barra de progreso durante el proceso.
    """
    if not os.path.exists(texto_path):
        print(f"üéôÔ∏è Transcribiendo {os.path.basename(audio_path)} en tiempo real...")

        # Transcribe el audio
        result = model.transcribe(audio_path)

        # Barra de progreso con delay para visualizaci√≥n
        for _ in tqdm(range(100), desc="üìñ Progreso de Transcripci√≥n", ascii=" ‚ñà", ncols=75):
            time.sleep(0.02)

        # Formatear texto con saltos de l√≠nea cada 50 palabras
        texto_final = formatear_texto(result["text"]) 
        
        # Guardar el texto transcrito en un archivo en la carpeta "resumen"
        with open(texto_path, "w", encoding="utf-8") as f:
            f.write(texto_final)

        print(f"‚úÖ Transcripci√≥n guardada en {texto_path}")

        # Eliminar el archivo de audio despu√©s de la transcripci√≥n
        os.remove(audio_path)
        print(f"üóëÔ∏è Archivo de audio {audio_path} eliminado.")
    else:
        print(f"‚ö†Ô∏è Transcripci√≥n ya existe: {os.path.basename(texto_path)}, omitiendo transcripci√≥n.")

# üîπ Procesar todos los videos en la carpeta "video"
for archivo in os.listdir(VIDEO_DIR):
    if archivo.endswith((".mp4", ".mkv", ".avi", ".mov")):  # Verifica formatos de video compatibles
        video_path = os.path.join(VIDEO_DIR, archivo)
        audio_path = os.path.join(AUDIO_DIR, archivo.rsplit(".", 1)[0] + ".mp3")  # Nombre del archivo de audio
        texto_path = os.path.join(RESUMEN_DIR, archivo.rsplit(".", 1)[0] + ".txt")  # Nombre del archivo de texto

        # Convertir video a audio
        convertir_video_a_audio(video_path, audio_path)

        # Transcribir audio a texto
        transcribir_audio_a_texto(audio_path, texto_path)

print("üöÄ ¬°Proceso completado! Revisa la carpeta 'resumen'.")